import{_ as n,c as a,d as e,o as t}from"./app-Bjk_n6ex.js";const p={};function l(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="nest" tabindex="-1"><a class="header-anchor" href="#nest"><span>nest</span></a></h1><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><ul><li>模块：module</li><li>控制器：controller</li><li>服务： service</li></ul><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 创建模块</span></span>
<span class="line">nest g module blog</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建 controller</span></span>
<span class="line">nest g controller blog</span>
<span class="line"><span class="token comment">// 创建不带测试文件的 controller</span></span>
<span class="line">nest g controller <span class="token operator">--</span>no<span class="token operator">-</span>spec</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建拦截器（配置统一的正确的返回格式）{ errno, data, message }</span></span>
<span class="line">nest g interceptor transform</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建拦截器（配置统一的错误的返回格式）</span></span>
<span class="line">nest g filter http<span class="token operator">-</span>exception</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nest-js连接-mysql-数据库" tabindex="-1"><a class="header-anchor" href="#nest-js连接-mysql-数据库"><span>Nest.js连接 MySQL 数据库</span></a></h2><p>使用 typeorm 并连接数据库</p><blockquote><p>npm install --save @nestjs/typeorm typeorm mysql2</p></blockquote><p>创建 service</p><blockquote><p>nest g service blog --no-spec</p></blockquote><h3 id="vscode按nestjs规则格式化-保存自动格式化" tabindex="-1"><a class="header-anchor" href="#vscode按nestjs规则格式化-保存自动格式化"><span>vscode按nestjs规则格式化（保存自动格式化）</span></a></h3><p>在Visual Studio Code中，要保存文件时自动格式化为满足NestJS规范，你需要安装一个插件，比如Prettier - Code formatter和ESLint。</p><p>步骤如下：</p><p>1.打开VS Code。 2.打开扩展视图（快捷键Ctrl + Shift + X）。 3.搜索并安装</p><p>Prettier - Code formatter和ESLint。</p><p>4.重新加载窗口（可选，可以让扩展生效）。 5.根据需要配置 .prettierrc 和 .eslintrc 文件。</p><p>这样，每次保存文件时，VS Code会自动使用Prettier进行格式化，并根据ESLint的配置检查代码符不符合NestJS的规范。 示例.prettierrc配置：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token string-property property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token string-property property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token string-property property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token string-property property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token string-property property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token string-property property">&quot;arrowParens&quot;</span><span class="token operator">:</span> <span class="token string">&quot;avoid&quot;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例.eslintrc配置（使用了NestJS的推荐配置）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token string-property property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@nestjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>    </span>
<span class="line">        <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">,</span>    </span>
<span class="line">        <span class="token string">&quot;plugin:@typescript-eslint/recommended-requiring-type-checking&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;prettier/@typescript-eslint&quot;</span><span class="token punctuation">,</span>    </span>
<span class="line">        <span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">,</span>    </span>
<span class="line">        <span class="token string">&quot;plugin:@nestjs/recommended&quot;</span>  </span>
<span class="line">     <span class="token punctuation">]</span><span class="token punctuation">,</span>  </span>
<span class="line">     <span class="token string-property property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">// 自定义规则 </span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保你的项目已经安装了所需的依赖，例如@nestjs/cli、typescript和@typescript-eslint/parser。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @nestjs<span class="token operator">/</span>cli</span>
<span class="line">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev typescript</span>
<span class="line">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>parser</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上步骤和配置将确保你的代码在保存时自动格式化，并符合NestJS的规范。</p>`,23)]))}const o=n(p,[["render",l],["__file","base.html.vue"]]),c=JSON.parse('{"path":"/zh/node/nest/base.html","title":"nest","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"Nest.js连接 MySQL 数据库","slug":"nest-js连接-mysql-数据库","link":"#nest-js连接-mysql-数据库","children":[{"level":3,"title":"vscode按nestjs规则格式化（保存自动格式化）","slug":"vscode按nestjs规则格式化-保存自动格式化","link":"#vscode按nestjs规则格式化-保存自动格式化","children":[]}]}],"git":{"updatedTime":1736852909000,"contributors":[{"name":"zhan_zhang","username":"zhan_zhang","email":"18311292602@163.com","commits":2,"url":"https://github.com/zhan_zhang"}]},"filePathRelative":"zh/node/nest/base.md"}');export{o as comp,c as data};
