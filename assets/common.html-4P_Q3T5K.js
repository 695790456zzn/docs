import{_ as i,c as e,d as t,o as p}from"./app-hG96JMTt.js";const a={};function n(u,l){return p(),e("div",null,l[0]||(l[0]=[t('<h1 id="常见面试题" tabindex="-1"><a class="header-anchor" href="#常见面试题"><span>常见面试题</span></a></h1><h2 id="vue2-0、vue3-0、react的diff算法的区别" tabindex="-1"><a class="header-anchor" href="#vue2-0、vue3-0、react的diff算法的区别"><span>Vue2.0、Vue3.0、React的diff算法的区别</span></a></h2><p>Vue2.0、Vue3.0 和 React 的 Diff 算法在性能和优化策略上各有特色，它们都试图以最小的计算量来确定 DOM 更新操作，但在实现上有所不同。以下是三者 Diff 算法的主要区别：</p><h3 id="_1-vue-2-0-的-diff-算法" tabindex="-1"><a class="header-anchor" href="#_1-vue-2-0-的-diff-算法"><span>1. Vue 2.0 的 Diff 算法</span></a></h3><p>Vue2.0 的 Diff 算法基于 双端比较算法，并通过一些优化手段实现了高效的视图更新。其主要特点如下：</p><ul><li>双端比较</li></ul><p>Vue2.0 在对比新旧 VNode 数组时，从头尾两端同时开始，依次对比四种情况： a.旧数组的头部和新数组的头部。 b.旧数组的尾部和新数组的尾部。 c.旧数组的头部和新数组的尾部。 d.旧数组的尾部和新数组的头部。</p><p>这种方式通过双指针的方式减少了多余的比较，提升了性能，特别是在列表末尾或开头插入或删除节点时。</p><ul><li>节点复用</li></ul><p>Vue2.0 尽量重用已有的 DOM 元素，只有在标签或 key 属性不同的情况下才会进行替换操作，减少 DOM 操作次数。</p><ul><li>简单 Diff</li></ul><p>Vue2.0 使用深度优先遍历（DFS）来递归对比节点，且仅比较同级节点，不进行跨级比较，因此效率相对较高。</p><ul><li>静态节点提升</li></ul><p>Vue2.0 中没有对静态节点提升的支持，因此在静态内容较多的情况下，性能可能会受到影响。</p><h3 id="_2-vue-3-0-的-diff-算法" tabindex="-1"><a class="header-anchor" href="#_2-vue-3-0-的-diff-算法"><span>2. Vue 3.0 的 Diff 算法</span></a></h3><p>Vue3.0 在 Diff 算法上进行了重大优化，采用了 最长递增子序列（LIS）算法 进行精细化的优化，并通过编译优化提升性能：</p><ul><li>静态提升</li></ul><p>Vue3.0 会将模板中的静态内容在编译阶段提取出来，在后续渲染中不再重新创建，减少不必要的 VNode 对比和 DOM 更新。</p><ul><li>Block Tree（块级优化）</li></ul><p>Vue3.0 使用 Block Tree 结构标记动态内容和静态内容，在更新时仅对动态内容进行 Diff 操作，而静态内容不参与对比，这极大地减少了计算量。</p><ul><li>最长递增子序列（LIS）</li></ul><p>Vue3.0 在进行子节点对比时，使用 LIS 算法来寻找子节点的最优对比路径。通过 LIS 可以确定哪些节点可以复用，哪些节点需要移动或新增，从而减少操作次数。</p><ul><li>优化插入和移动操作</li></ul><p>Vue3.0 的 Diff 算法不仅判断节点是否复用，还能在某些情况下通过节点的最小移动次数来更新 DOM。这种操作适合列表项目的频繁插入、删除和移动。</p><h3 id="_3-react-的-diff-算法" tabindex="-1"><a class="header-anchor" href="#_3-react-的-diff-算法"><span>3. React 的 Diff 算法</span></a></h3><p>React 的 Diff 算法被称为 Reconciliation，基于 Fiber 架构，具有分片更新的能力。React Diff 算法的特点主要有：</p><ul><li>基于 Key 的同层比较</li></ul><p>React 会优先比较具有相同 key 的节点，以实现高效的节点复用。当 key 相同且类型一致时，React 认为该节点未变更，仅更新其属性和内容。</p><ul><li>单层 Diff，避免跨层比较</li></ul><p>React 假设 DOM 节点的变化通常只发生在同一层级，因此会忽略跨层级的节点移动。这样可以避免复杂的跨层级对比，提高 Diff 的效率。</p><ul><li>O(n) 的算法复杂度</li></ul><p>React 通过遍历单层节点，依次对比同层次节点，避免了深度优先遍历或广度优先遍历的高计算复杂度，使得 Diff 的时间复杂度为 O(n)，适合大规模的组件更新。</p><ul><li>Fiber 架构</li></ul><p>React 16 引入了 Fiber 架构，使得 Diff 过程可以分片执行，并通过优先级控制来优化渲染顺序。Fiber 允许 React 将复杂的更新任务拆分为小片段，使得页面响应更为流畅。</p><ul><li>静态内容优化较少</li></ul><p>React 的 Diff 算法没有对静态内容提升的处理，通常需要开发者自行进行优化（如将不变的组件使用 React.memo 或 PureComponent），以减少无意义的重渲染。</p><h2 id="http请求版本和区别" tabindex="-1"><a class="header-anchor" href="#http请求版本和区别"><span>HTTP请求版本和区别</span></a></h2><p>HTTP（Hypertext Transfer Protocol）是互联网中最重要的协议之一，用于客户端和服务器之间的通信。HTTP 经过多次迭代和优化，目前主要有以下几个版本：HTTP/0.9、HTTP/1.0、HTTP/1.1、HTTP/2 和 HTTP/3。每个版本在传输性能、并发性、安全性等方面有所不同。</p><h3 id="_1-http-0-9" tabindex="-1"><a class="header-anchor" href="#_1-http-0-9"><span>1. HTTP/0.9</span></a></h3><p><strong>特点：</strong></p><ul><li>HTTP/0.9 是最早的 HTTP 协议版本，诞生于 1991 年，专注于传输纯文本。</li><li>无状态：每个请求独立，服务器不保存请求间的状态。</li><li>仅支持 GET 方法：只能请求资源，无法发送数据。</li><li>没有 HTTP 头：请求和响应都没有头信息，仅能传输纯文本。</li></ul><p><strong>应用场景：</strong></p><ul><li>HTTP/0.9 主要用于初期的网页浏览，支持有限的文本传输，不适合现代应用。</li></ul><h3 id="_2-http-1-0" tabindex="-1"><a class="header-anchor" href="#_2-http-1-0"><span>2. HTTP/1.0</span></a></h3><p>发布时间：1996 年</p><p><strong>特点：</strong></p><ul><li>支持多种 HTTP 方法：增加了 POST 和 HEAD 方法，支持更多请求类型。</li><li>增加了 HTTP 头：客户端和服务器可以通过 HTTP 头传递更多的元信息，如 Content-Type、Content-Length 等。</li><li>短连接：HTTP/1.0 默认使用短连接，每次请求完成后会关闭连接。为每个请求建立和关闭 TCP 连接的开销较大。</li></ul><p><strong>缺点：</strong></p><ul><li>每次请求都需要重新建立连接，效率低，特别是在同一页面包含多个资源（如图片、CSS）时，会导致性能瓶颈。</li><li>无缓存机制：缺乏明确的缓存控制，不能很好的支持现在web应用的性能需求</li><li>带宽利用率低：没有引入压缩等机制，数据传输效率较低</li></ul><h3 id="_3-http-1-1" tabindex="-1"><a class="header-anchor" href="#_3-http-1-1"><span>3. HTTP/1.1</span></a></h3><p>发布时间：1997 年</p><p><strong>特点：</strong></p><ul><li>长连接：引入了持久连接机制（Keep-Alive），允许多个请求和响应复用同一个 TCP 连接，减少连接建立的开销。</li><li>管道化：支持请求管道化（Pipelining），即在同一连接中，客户端可以同时发送多个请求而无需等待响应完成（不过，大多数浏览器并未完全实现此功能）。</li><li>增加新的 HTTP 方法：支持 PUT、DELETE、OPTIONS 等方法，拓展了 HTTP 的功能。</li><li>分块传输编码：支持分块传输编码（Chunked Transfer Encoding），在传输大文件或动态生成内容时，服务器可以分块发送数据。</li><li>Host 头：增加了 Host 头，使得同一台服务器可以通过主机名来区分不同的站点，支持虚拟主机的需求。</li><li>缓存控制：使用Cache-Control和ETag等头自字段更好的支持缓存</li><li>错误状态码扩展：增加了如206（部分内容）、409（冲突）、410（已删除）等状态码</li></ul><p><strong>缺点：</strong></p><ul><li>队头阻塞：虽然支持管道化，但同一个连接上，请求的响应必须按顺序返回，如果前一个请求阻塞，后续请求也会受影响。</li><li>并发限制：浏览器通常对同一域名的并发请求数量有限（通常为6个），超过限制的请求需要排队。</li></ul><h3 id="_4-http-2" tabindex="-1"><a class="header-anchor" href="#_4-http-2"><span>4. HTTP/2</span></a></h3><p>发布时间：2015 年</p><p><strong>特点：</strong></p><ul><li>二进制分帧：HTTP/2 采用二进制格式传输数据（而非文本格式），更高效。将请求和响应分解为更小的帧并进行多路复用。每个帧有唯一的流（Stream）ID。</li><li>多路复用：一个连接可以并发处理多个请求和响应，不会相互阻塞，彻底解决了 HTTP/1.x 中的队头阻塞问题。</li></ul><h4 id="http-2-0-的多路复用-multiplexing" tabindex="-1"><a class="header-anchor" href="#http-2-0-的多路复用-multiplexing"><span>HTTP/2.0 的多路复用 (Multiplexing)</span></a></h4><p>多路复用是 HTTP/2.0 的核心功能之一，用于解决 HTTP/1.1 中的性能瓶颈问题，例如队头阻塞 (Head-of-line Blocking) 和连接过多的问题。</p><p><strong>多路复用的核心特性</strong></p><p>1.单一连接，多个并发流：</p><ul><li>在 HTTP/2 中，客户端与服务器之间只需一个 TCP 连接即可并发传输多个请求和响应。</li><li>每个请求/响应被分成独立的帧，这些帧可以混合在同一个连接中传输。</li></ul><p>2.无序传输：</p><ul><li>HTTP/2 使用流 (Stream) 来标识每个请求/响应。即使帧的传输顺序不同，它们仍然可以在接收端根据流的标识符重新组装。</li></ul><p>3.双向通信：</p><ul><li>同一条连接既可以传输客户端的请求，也可以传输服务器的推送 (Server Push) 数据。</li></ul><p>4.消除队头阻塞：</p><ul><li>在 HTTP/1.1 中，浏览器通常会限制每个域名同时发起的 TCP 连接数量（通常是 6 个），超出的请求会被阻塞。</li><li>HTTP/2 的多路复用允许多个流独立传输，避免单个流阻塞其他流的传输。</li></ul><p><strong>HTTP/2 多路复用的原理</strong></p><p>1.帧 (Frame)：</p><ul><li>HTTP/2 将请求和响应的数据分成更小的帧，每个帧附带一个流标识符 (Stream ID)。</li><li>帧可以属于不同的流，它们可以交错在一起，通过相同的 TCP 连接发送。</li></ul><p>2.流 (Stream)：</p><ul><li>每个请求或响应对应一个流，每个流都有唯一的标识符。</li><li>流可以独立地打开、关闭和优先级设置。</li></ul><p>3.优先级 (Priority)：</p><ul><li>每个流都可以设置优先级，允许服务器优先传输高优先级的内容，从而优化带宽利用率。</li></ul><p>4.二进制协议：</p><ul><li>HTTP/2 使用二进制帧格式，取代了 HTTP/1.1 的文本格式。</li><li>二进制格式更高效，易于解析，减少了协议层的开销。</li></ul><p>5.流控 (Flow Control)：</p><ul><li>HTTP/2 使用窗口更新 (Window Update) 帧来控制流量，确保数据的发送方不会压垮接收方。</li><li>Header 压缩：使用 HPACK 算法对头信息进行压缩，减少传输体积，提升速度。</li><li>服务器推送：服务器可以在客户端请求之前主动推送资源（如 CSS、JavaScript 文件），减少后续请求延迟。</li></ul><h4 id="hpack" tabindex="-1"><a class="header-anchor" href="#hpack"><span>HPACK</span></a></h4><p>静态表</p><ul><li>静态表是一个预定义、全局共享的头字段集合</li><li>包含常用的HTTP头字段，如:method , :path , content-type等，最多61个</li><li>静态表是固定不变的，因此客户端和服务器之间无需传输，直接通过索引访问即可 如：:method:GET 的索引值为2，:authority的索引值为1</li></ul><p>动态表</p><ul><li>动态表是客户端和服务器自维护的一个内存缓冲区，用于存储当前会话的头字段。</li><li>头字段在动态表中按索引存储，重复出现时可以直接引用索引，而无需再次传输完整的字段。</li><li>动态表时可修改的，支持添加、更新和删除。</li></ul><p>哈夫曼编码</p><ul><li>哈夫曼编码时一种可变长度的二进制编码方案，用于对头字段的值进行进一步压缩。</li><li>它根据字符的出现频率分配编码，常见字符使用较短的编码，罕见字符使用较长的编码。</li></ul><p>HPACK 的优势</p><ul><li>减少冗余传输：利用动态表和静态表对重复字段进行索引引用，大幅减少传输的数据量。</li><li>高效压缩：哈夫曼编码进一步压缩头部数据。</li><li>带宽节约：尤其在多次请求场景下，动态表复用显著降低了带宽占用。</li><li>灵活性：动态表和静态表结合，同时支持安全的字段传输。</li></ul><p>优点：</p><ul><li>高性能：多路复用解决了HTTP/1.1的线头阻塞问题，头部压缩减少了宽带占用。</li><li>减少延迟：不需要为每个请求建立单独的连接，服务器推送提前传输资源，减少请求的等待时间。</li><li>传输效率高：二进制协议使得传输和解析更加高效。</li></ul><p>缺点：</p><ul><li>虽然 HTTP/2 性能明显提升，但依然基于 TCP 协议。由于 TCP 的握手和重传机制，在高丢包环境下性能会下降。</li></ul><h3 id="_5-http-3" tabindex="-1"><a class="header-anchor" href="#_5-http-3"><span>5. HTTP/3</span></a></h3><p>发布时间：2020 年（起草）</p><p>特点：</p><ul><li>基于 QUIC 协议：HTTP/3 采用 QUIC（Quick UDP Internet Connections）协议，基于 UDP 实现的传输层协议，解决了 TCP 的队头阻塞和慢启动问题。</li><li>减少连接建立时间：QUIC 将 TLS 和握手集成到协议中，支持 0-RTT 和 1-RTT 连接建立，使得连接速度更快。</li><li>无队头阻塞：HTTP/3 中每个数据流独立传输，即使某个流丢包，也不会影响其他流的传输。</li><li>更适合移动网络：在移动环境中，QUIC 更快的连接恢复和重传机制减少了因网络切换导致的连接中断。</li></ul><p>优点：</p><ul><li>HTTP/3 解决了 TCP 的一些固有问题，如队头阻塞和高丢包时的性能降低。更适合现代 Web 应用，特别是在移动网络和弱网环境下表现优异。</li></ul><p>缺点：</p><ul><li>由于基于 UDP，部分防火墙和网络中间设备可能会对 QUIC 协议造成阻碍。实现和推广仍在进行中。</li></ul>',102)]))}const r=i(a,[["render",n],["__file","common.html.vue"]]),T=JSON.parse('{"path":"/zh/interview/common.html","title":"常见面试题","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Vue2.0、Vue3.0、React的diff算法的区别","slug":"vue2-0、vue3-0、react的diff算法的区别","link":"#vue2-0、vue3-0、react的diff算法的区别","children":[{"level":3,"title":"1. Vue 2.0 的 Diff 算法","slug":"_1-vue-2-0-的-diff-算法","link":"#_1-vue-2-0-的-diff-算法","children":[]},{"level":3,"title":"2. Vue 3.0 的 Diff 算法","slug":"_2-vue-3-0-的-diff-算法","link":"#_2-vue-3-0-的-diff-算法","children":[]},{"level":3,"title":"3. React 的 Diff 算法","slug":"_3-react-的-diff-算法","link":"#_3-react-的-diff-算法","children":[]}]},{"level":2,"title":"HTTP请求版本和区别","slug":"http请求版本和区别","link":"#http请求版本和区别","children":[{"level":3,"title":"1. HTTP/0.9","slug":"_1-http-0-9","link":"#_1-http-0-9","children":[]},{"level":3,"title":"2. HTTP/1.0","slug":"_2-http-1-0","link":"#_2-http-1-0","children":[]},{"level":3,"title":"3. HTTP/1.1","slug":"_3-http-1-1","link":"#_3-http-1-1","children":[]},{"level":3,"title":"4. HTTP/2","slug":"_4-http-2","link":"#_4-http-2","children":[]},{"level":3,"title":"5. HTTP/3","slug":"_5-http-3","link":"#_5-http-3","children":[]}]}],"git":{"updatedTime":1736930446000,"contributors":[{"name":"zhan_zhang","username":"zhan_zhang","email":"18311292602@163.com","commits":1,"url":"https://github.com/zhan_zhang"}]},"filePathRelative":"zh/interview/common.md"}');export{r as comp,T as data};
