import{_ as n,c as a,d as e,o as p}from"./app-DdRqyrxk.js";const t={};function l(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ts基本使用" tabindex="-1"><a class="header-anchor" href="#ts基本使用"><span>TS基本使用</span></a></h1><p><a href="https://nodejs.cn/typescript/" target="_blank" rel="noopener noreferrer">TypeScript中文文档</a></p><h2 id="ts-优点和缺点" tabindex="-1"><a class="header-anchor" href="#ts-优点和缺点"><span>TS 优点和缺点</span></a></h2><p>优点：</p><ul><li>静态类型</li><li>有类型错误，编译时就报错（而非运行时）</li><li>智能提示，提高开发效率和稳定性</li></ul><p>缺点：</p><ul><li>有一定学习成本</li><li>某些情况下，类型定义过于混乱，可读性不好</li><li>应用不规范，会变成‘any’script</li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><ul><li>大型项目，业务复杂，维护人员多</li><li>逻辑性比较强的代码，需要类型更稳定</li><li>组内要有至少一个懂 TS 的技术 leader 负责把控代码规范</li></ul><h2 id="ts-基础类型" tabindex="-1"><a class="header-anchor" href="#ts-基础类型"><span>TS 基础类型</span></a></h2><h3 id="常见的基础类型" tabindex="-1"><a class="header-anchor" href="#常见的基础类型"><span>常见的基础类型</span></a></h3><ul><li>boolean</li><li>number</li><li>string</li><li>symbol</li><li>undefined</li><li>null</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 类型断言 -- 赋值明确变量类型时，可以不明确指定变量的类型</span></span>
<span class="line"><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他类型" tabindex="-1"><a class="header-anchor" href="#其他类型"><span>其他类型</span></a></h3><p>数组（Array）：单一类型</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token literal-property property">arr1</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">arr2</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>元组（Tuple）：多个类型</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>枚举（本质就是 JS 对象）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">    Red<span class="token punctuation">,</span></span>
<span class="line">    Green<span class="token punctuation">,</span></span>
<span class="line">    Blue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">c</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象和函数（一般用自定义类型）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line">    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">user</span><span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ts-访问修饰符" tabindex="-1"><a class="header-anchor" href="#ts-访问修饰符"><span>TS 访问修饰符</span></a></h2><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h3><ul><li>public（默认）：全部可访问</li><li>protected：自己和派生类可访问</li><li>private：只有自己可访问</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token literal-property property">girlfriend</span><span class="token operator">:</span> string</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 访问修饰符：可以修饰属性，也可以修饰方法</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>girlfriend <span class="token operator">=</span> <span class="token string">&#39;小丽&#39;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlfriend<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// console.log(this.girlfriend);</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">x<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token comment">// x.age // 报错，不能在外面获取</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性可以直接定义到构造函数的参数中" tabindex="-1"><a class="header-anchor" href="#属性可以直接定义到构造函数的参数中"><span>属性可以直接定义到构造函数的参数中</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> girlfriend <span class="token operator">=</span> <span class="token string">&#39;小丽&#39;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="和-private-有什么区别" tabindex="-1"><a class="header-anchor" href="#和-private-有什么区别"><span>#和 private 有什么区别？</span></a></h3><ul><li># 属性不能在构造函数参数中定义</li><li>private 属性，可通过 as any 强制获取，但 # 属性不行</li><li># 更加私密</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  #salary<span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">salary</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#salary <span class="token operator">=</span> salary<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#salary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以强制获取</span></span>
<span class="line"><span class="token comment">// console.log((p as any).#salary); // 报错，无法强制获取</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><h3 id="定义的位置" tabindex="-1"><a class="header-anchor" href="#定义的位置"><span>定义的位置</span></a></h3><p>定义在函数中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> fn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> arg</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> fn<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function fn1&lt;T, U&gt;(a: T, b: U) {</span></span>
<span class="line"><span class="token comment">//   console.log(a, b);</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"><span class="token comment">// fn1&lt;string, number&gt;(&#39;x&#39;, 10)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义在 class 中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义于 interface 和 type</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 定义在 type 中</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">myFn</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span> <span class="token operator">=</span> fn</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义在 interface 中</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">F1</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">myFn2</span><span class="token operator">:</span> <span class="token constant">F1</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> fn</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型的使用" tabindex="-1"><a class="header-anchor" href="#泛型的使用"><span>泛型的使用</span></a></h3><p>可以传入任何类型，包括 interface 和 type</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 泛型，可以传入任何类型</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> u <span class="token operator">=</span> fn<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以当作任何类型来使用，如放在数组中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 泛型，可以当作任何类型来使用</span></span>
<span class="line"><span class="token keyword">function</span> fn3<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">fn3<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">fn3<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以自定义扩展泛型的属性</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 泛型的扩展</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">F2</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">length</span><span class="token operator">:</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> fn4<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">F2</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">fn4<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span></span>
<span class="line">fn4<span class="token operator">&lt;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ts-交叉类型和联合类型" tabindex="-1"><a class="header-anchor" href="#ts-交叉类型和联合类型"><span>TS 交叉类型和联合类型</span></a></h2><h3 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型"><span>交叉类型</span></a></h3><p>多个类型合并为一个类型</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">U1</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">city</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">U2</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 交叉类型</span></span>
<span class="line">type UserType1 <span class="token operator">=</span> <span class="token constant">U1</span> <span class="token operator">&amp;</span> <span class="token constant">U2</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">user1</span><span class="token operator">:</span> UserType1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;beijing&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 可获取 U1 U2 的所有属性（并集）</span></span>
<span class="line"><span class="token comment">// 如果属性类型冲突了，那该属性类型是 never</span></span>
<span class="line"><span class="token comment">// 基础类型，不能交叉</span></span>
<span class="line">type <span class="token constant">T1</span> <span class="token operator">=</span> string <span class="token operator">&amp;</span> number</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型"><span>联合类型</span></a></h3><p>联合多个类型 T1｜T2｜T3，一种“或”的关系，基础类型可以联合</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">U1</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">city</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">U2</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">U1</span> <span class="token operator">|</span> <span class="token constant">U2</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type <span class="token constant">T</span> <span class="token operator">=</span> string <span class="token operator">|</span> number</span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// console.log(a.length);</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ts-特殊符号" tabindex="-1"><a class="header-anchor" href="#ts-特殊符号"><span>TS 特殊符号</span></a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>?</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// ? 可选</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">u</span><span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>?.</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// ?. 可选链</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">user</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;北京&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// const city = user &amp;&amp; user.info &amp;&amp; user.info.city</span></span>
<span class="line"><span class="token keyword">const</span> city <span class="token operator">=</span> user<span class="token operator">?.</span>info<span class="token operator">?.</span>city</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>??</span></a></h3><p>空值合并运算符（只有左侧是 null 或者 undefined，才会返回右侧。补齐 ||）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// ?? 空值合并运算符（只有左侧是 null 或者 undefined，才会返回右侧。补齐 ||）</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">user1</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> n1 <span class="token operator">=</span> user1<span class="token punctuation">.</span>name <span class="token operator">??</span> <span class="token string">&#39;暂无姓名&#39;</span></span>
<span class="line"><span class="token keyword">const</span> n2 <span class="token operator">=</span> user1<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&quot;暂无姓名&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> i1 <span class="token operator">=</span> user1<span class="token punctuation">.</span>index <span class="token operator">??</span> <span class="token string">&#39;暂无 index&#39;</span> <span class="token comment">// 0</span></span>
<span class="line"><span class="token keyword">const</span> i2 <span class="token operator">=</span> user1<span class="token punctuation">.</span>index <span class="token operator">||</span> <span class="token string">&#39;暂无 index&#39;</span> <span class="token comment">// &#39;暂无 index&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>!</span></a></h3><p>非空断言操作符</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// ! 非空断言操作符</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a<span class="token operator">!</span><span class="token punctuation">.</span>length <span class="token comment">// !表示你已经知道了 a 不会是 undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span>_</span></a></h3><p>数字分隔符</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// _ 数字分隔符</span></span>
<span class="line"><span class="token keyword">const</span> million <span class="token operator">=</span> <span class="token number">1_000_000</span></span>
<span class="line"><span class="token keyword">const</span> phone <span class="token operator">=</span> <span class="token number">135_1111_2222</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交叉类型-1" tabindex="-1"><a class="header-anchor" href="#交叉类型-1"><span>&amp; - 交叉类型</span></a></h3><h3 id="联合类型-1" tabindex="-1"><a class="header-anchor" href="#联合类型-1"><span>｜- 联合类型</span></a></h3><h3 id="私有属性" tabindex="-1"><a class="header-anchor" href="#私有属性"><span># - 私有属性</span></a></h3><h2 id="ts-常见的工具类型" tabindex="-1"><a class="header-anchor" href="#ts-常见的工具类型"><span>TS 常见的工具类型</span></a></h2><h3 id="partial-t" tabindex="-1"><a class="header-anchor" href="#partial-t"><span>Partial&lt;T&gt;</span></a></h3><p>获取部分属性</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line">  <span class="token literal-property property">city</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">u</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required-t" tabindex="-1"><a class="header-anchor" href="#required-t"><span>Required&lt;T&gt;</span></a></h3><p>所有属性都是必须的</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> string</span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> number</span>
<span class="line">  city<span class="token operator">?</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">u</span><span class="token operator">:</span> Required<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pick-t-k" tabindex="-1"><a class="header-anchor" href="#pick-t-k"><span>Pick&lt;T, K&gt;</span></a></h3><p>选取几个属性</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line">  <span class="token literal-property property">city</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type User1 <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">u</span><span class="token operator">:</span> User1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omit-t-k" tabindex="-1"><a class="header-anchor" href="#omit-t-k"><span>Omit&lt;T, K&gt;</span></a></h3><p>剔除几个属性</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line">  <span class="token literal-property property">city</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type User2 <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;city&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">u2</span><span class="token operator">:</span> User2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly-t" tabindex="-1"><a class="header-anchor" href="#readonly-t"><span>ReadOnly&lt;T&gt;</span></a></h3><p>把所有属性设置为只读</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number</span>
<span class="line">  <span class="token literal-property property">city</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">type User3 <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">u3</span><span class="token operator">:</span> User3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,86)]))}const c=n(t,[["render",l],["__file","common.html.vue"]]),r=JSON.parse('{"path":"/zh/ts/common.html","title":"TS基本使用","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"TS 优点和缺点","slug":"ts-优点和缺点","link":"#ts-优点和缺点","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"TS 基础类型","slug":"ts-基础类型","link":"#ts-基础类型","children":[{"level":3,"title":"常见的基础类型","slug":"常见的基础类型","link":"#常见的基础类型","children":[]},{"level":3,"title":"其他类型","slug":"其他类型","link":"#其他类型","children":[]}]},{"level":2,"title":"TS 访问修饰符","slug":"ts-访问修饰符","link":"#ts-访问修饰符","children":[{"level":3,"title":"访问修饰符","slug":"访问修饰符","link":"#访问修饰符","children":[]},{"level":3,"title":"属性可以直接定义到构造函数的参数中","slug":"属性可以直接定义到构造函数的参数中","link":"#属性可以直接定义到构造函数的参数中","children":[]},{"level":3,"title":"#和 private 有什么区别？","slug":"和-private-有什么区别","link":"#和-private-有什么区别","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"定义的位置","slug":"定义的位置","link":"#定义的位置","children":[]},{"level":3,"title":"泛型的使用","slug":"泛型的使用","link":"#泛型的使用","children":[]}]},{"level":2,"title":"TS 交叉类型和联合类型","slug":"ts-交叉类型和联合类型","link":"#ts-交叉类型和联合类型","children":[{"level":3,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":3,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]}]},{"level":2,"title":"TS 特殊符号","slug":"ts-特殊符号","link":"#ts-特殊符号","children":[{"level":3,"title":"?","slug":"","link":"#","children":[]},{"level":3,"title":"?.","slug":"-1","link":"#-1","children":[]},{"level":3,"title":"??","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"!","slug":"-3","link":"#-3","children":[]},{"level":3,"title":"_","slug":"-4","link":"#-4","children":[]},{"level":3,"title":"& - 交叉类型","slug":"交叉类型-1","link":"#交叉类型-1","children":[]},{"level":3,"title":"｜- 联合类型","slug":"联合类型-1","link":"#联合类型-1","children":[]},{"level":3,"title":"# - 私有属性","slug":"私有属性","link":"#私有属性","children":[]}]},{"level":2,"title":"TS 常见的工具类型","slug":"ts-常见的工具类型","link":"#ts-常见的工具类型","children":[{"level":3,"title":"Partial<T>","slug":"partial-t","link":"#partial-t","children":[]},{"level":3,"title":"Required<T>","slug":"required-t","link":"#required-t","children":[]},{"level":3,"title":"Pick<T, K>","slug":"pick-t-k","link":"#pick-t-k","children":[]},{"level":3,"title":"Omit<T, K>","slug":"omit-t-k","link":"#omit-t-k","children":[]},{"level":3,"title":"ReadOnly<T>","slug":"readonly-t","link":"#readonly-t","children":[]}]}],"git":{"updatedTime":1736845895000,"contributors":[{"name":"zhan_zhang","username":"zhan_zhang","email":"18311292602@163.com","commits":2,"url":"https://github.com/zhan_zhang"}]},"filePathRelative":"zh/ts/common.md"}');export{c as comp,r as data};
