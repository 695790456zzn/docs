import{_ as s,c as a,d as p,o as t}from"./app-DdRqyrxk.js";const e={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="网络相关" tabindex="-1"><a class="header-anchor" href="#网络相关"><span>网络相关</span></a></h1><h2 id="ajax-请求-get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#ajax-请求-get-和-post-的区别"><span>ajax 请求 get 和 post 的区别</span></a></h2><ul><li>get 一般用于查询操作，post 一般用于用户提交操作</li><li>get 参数拼接在 url 上，post 放在请求体内（数据体积可更大）</li><li>安全性：post 易于防止 CSRF</li></ul><h2 id="解释-jsonp-原理-为何不是真正到-ajax" tabindex="-1"><a class="header-anchor" href="#解释-jsonp-原理-为何不是真正到-ajax"><span>解释 jsonp 原理，为何不是真正到 ajax</span></a></h2><ul><li>浏览器的同源策略（服务器端没有同源策略）和跨域</li><li>哪些 html 标签能绕过跨域（img，script）</li></ul><h2 id="同源策略及跨域的解决方案" tabindex="-1"><a class="header-anchor" href="#同源策略及跨域的解决方案"><span>同源策略及跨域的解决方案</span></a></h2><p>浏览器的同源策略（Same-Origin Policy）是一种重要的安全机制，旨在防止不同来源（域名、协议、端口）的网页相互访问敏感数据。基于同源策略，前端开发中常常需要处理跨域请求，以在不同来源之间安全地进行数据通信。</p><h3 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略"><span>同源策略</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p>只有当两个 URL 的协议、域名和端口都相同，它们才属于同源。只有在同源的情况下，浏览器才能允许访问对方的资源。</p><h4 id="同源策略限制的内容" tabindex="-1"><a class="header-anchor" href="#同源策略限制的内容"><span>同源策略限制的内容</span></a></h4><ul><li>DOM 访问：不同源的页面之间不能互相操作 DOM。</li><li>Cookie 和 LocalStorage 访问：不同源的页面之间不能互相访问对方的 Cookie 和本地存储数据。</li><li>Ajax 请求：在默认情况下，浏览器会阻止不同源的 Ajax 请求。</li></ul><h3 id="前端跨域方案" tabindex="-1"><a class="header-anchor" href="#前端跨域方案"><span>前端跨域方案</span></a></h3><h4 id="_1-jsonp-json-with-padding" tabindex="-1"><a class="header-anchor" href="#_1-jsonp-json-with-padding"><span>1.JSONP（JSON with Padding）</span></a></h4><p><strong>原理</strong></p><p>利用 &lt;script&gt; 标签不受同源策略限制的特点，动态生成 &lt;script&gt; 标签来请求数据。服务端接收到请求后，将数据以函数调用的形式返回，前端定义对应的回调函数来处理数据。</p><p><strong>优缺点</strong></p><ul><li>优点：简单易用，兼容性好。</li><li>缺点：只支持 GET 请求，不适合复杂的请求和响应结构。</li></ul><p><strong>示例</strong></p><p>前端</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;https://example.com/data?callback=handleResponse&#39;</span><span class="token punctuation">;</span></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-cors-cross-origin-resource-sharing" tabindex="-1"><a class="header-anchor" href="#_2-cors-cross-origin-resource-sharing"><span>2.CORS（Cross-Origin Resource Sharing）</span></a></h4><p><strong>原理</strong></p><p>CORS 是一种跨域资源共享的机制，通过设置 HTTP 响应头，服务器声明允许的请求源、请求方式和头信息。浏览器收到响应头后，决定是否允许跨域请求。</p><ul><li>简单请求：如 GET、POST 请求，不带自定义头信息，直接通过。</li><li>预检请求：对于复杂请求（如 PUT、DELETE、带有自定义头信息等），浏览器会先发送 OPTIONS 请求预检，确认服务器是否允许跨域。</li></ul><p><strong>优缺点</strong></p><ul><li>优点：支持多种 HTTP 请求方法，控制粒度细。</li><li>缺点：需要服务端配置响应头。</li></ul><p><strong>示例</strong></p><p>服务端设置响应头：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com</span>
<span class="line">Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Methods<span class="token operator">:</span> <span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token constant">PUT</span><span class="token punctuation">,</span> <span class="token constant">DELETE</span></span>
<span class="line">Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Headers<span class="token operator">:</span> Content<span class="token operator">-</span>Type</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端直接发起请求：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/api/data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-代理服务器" tabindex="-1"><a class="header-anchor" href="#_3-代理服务器"><span>3.代理服务器</span></a></h4><p><strong>原理</strong></p><p>通过搭建一个代理服务器，前端将跨域请求发送到同源的代理服务器，再由代理服务器将请求转发到目标服务器。这样浏览器看到的请求是同源的，而实际跨域请求由后端代理实现。</p><p><strong>优缺点：</strong></p><ul><li>优点：支持多种 HTTP 请求方法，适合复杂跨域场景。</li><li>缺点：需要搭建和维护代理服务器。</li></ul><p><strong>示例：</strong> 前端请求 /api/data：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本地开发中，可以通过 Webpack 配置代理：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// webpack.config.js</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-document-domain-iframe-跨域" tabindex="-1"><a class="header-anchor" href="#_4-document-domain-iframe-跨域"><span>4. document.domain + iframe 跨域</span></a></h4><p><strong>原理：</strong></p><p>适用于主域相同、子域不同的场景。通过将 document.domain 设置为相同的主域来实现跨域访问。</p><p><strong>优缺点：</strong></p><ul><li>优点：适用于同主域的场景。</li><li>缺点：只能用于同一主域名下的子域，场景受限。</li></ul><p><strong>示例：</strong></p><p>页面 A（a.example.com）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置主域</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>页面 B（b.example.com）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置主域</span></span>
<span class="line"><span class="token comment">// 通过 iframe 访问页面 A 的内容</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-postmessage-跨域通信" tabindex="-1"><a class="header-anchor" href="#_5-postmessage-跨域通信"><span>5. postMessage 跨域通信</span></a></h4><p><strong>原理：</strong></p><p>postMessage 是 HTML5 提供的 API，可以安全地实现跨源通信。通过在不同来源的窗口间发送消息。</p><p><strong>优缺点：</strong></p><ul><li>优点：安全、灵活，适合多窗口和嵌套 iframe 的场景。</li><li>缺点：只能用于页面间的数据传递，不能直接跨域请求数据。</li></ul><p><strong>示例：</strong></p><p>父窗口页面：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myIframe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from parent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://child.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token string">&#39;https://child.example.com&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到子页面信息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子页面（https://child.example.com）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token string">&#39;https://parent.example.com&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到父页面信息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  event<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from child&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-websocket-跨域" tabindex="-1"><a class="header-anchor" href="#_6-websocket-跨域"><span>6. WebSocket 跨域</span></a></h4><p><strong>原理：</strong></p><p>WebSocket 是一种通信协议，它不受同源策略的限制，可以直接建立跨域连接，实现双向通信。</p><p><strong>优缺点：</strong></p><ul><li>优点：适合实时通信场景。</li><li>缺点：需要 WebSocket 支持，不适合普通 HTTP 请求。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;wss://example.com/socket&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到消息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-nginx-反向代理" tabindex="-1"><a class="header-anchor" href="#_7-nginx-反向代理"><span>7. nginx 反向代理</span></a></h4><p><strong>原理：</strong></p><p>使用 Nginx 配置反向代理，将跨域请求代理到同源地址，再转发到目标服务器，实现跨域访问。</p><p><strong>优缺点：</strong></p><ul><li>优点：实现简单、性能好，适合生产环境。</li><li>缺点：需要配置服务器。</li></ul><p><strong>示例：</strong></p><p>在 Nginx 配置中添加：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">server <span class="token punctuation">{</span></span>
<span class="line">    location <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span></span>
<span class="line">        proxy_pass https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span><span class="token punctuation">;</span></span>
<span class="line">        proxy_set_header Host $host<span class="token punctuation">;</span></span>
<span class="line">        proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Real<span class="token operator">-</span><span class="token constant">IP</span> $remote_addr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78)]))}const i=s(e,[["render",o],["__file","net.html.vue"]]),r=JSON.parse('{"path":"/zh/interview/net/net.html","title":"网络相关","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"ajax 请求 get 和 post 的区别","slug":"ajax-请求-get-和-post-的区别","link":"#ajax-请求-get-和-post-的区别","children":[]},{"level":2,"title":"解释 jsonp 原理，为何不是真正到 ajax","slug":"解释-jsonp-原理-为何不是真正到-ajax","link":"#解释-jsonp-原理-为何不是真正到-ajax","children":[]},{"level":2,"title":"同源策略及跨域的解决方案","slug":"同源策略及跨域的解决方案","link":"#同源策略及跨域的解决方案","children":[{"level":3,"title":"同源策略","slug":"同源策略","link":"#同源策略","children":[]},{"level":3,"title":"前端跨域方案","slug":"前端跨域方案","link":"#前端跨域方案","children":[]}]}],"git":{"updatedTime":1736930446000,"contributors":[{"name":"zhan_zhang","username":"zhan_zhang","email":"18311292602@163.com","commits":1,"url":"https://github.com/zhan_zhang"}]},"filePathRelative":"zh/interview/net/net.md"}');export{i as comp,r as data};
