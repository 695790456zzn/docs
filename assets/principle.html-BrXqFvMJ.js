import{_ as s,c as a,d as e,o as p}from"./app-hG96JMTt.js";const t={};function l(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="vue3原理" tabindex="-1"><a class="header-anchor" href="#vue3原理"><span>Vue3原理</span></a></h1><h2 id="vue3-如何实现响应式" tabindex="-1"><a class="header-anchor" href="#vue3-如何实现响应式"><span>Vue3 如何实现响应式</span></a></h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> proxyData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result <span class="token comment">// 返回结果    </span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token keyword">return</span> result          </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result <span class="token comment">// 是否删除成功    </span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reflect-作用" tabindex="-1"><a class="header-anchor" href="#reflect-作用"><span>Reflect 作用</span></a></h3><ul><li>和 proxy 能力一一对应</li><li>规范化、标准化、函数式</li><li>替代掉 Object 上的工具函数</li></ul><h3 id="proxy-如何实现响应式" tabindex="-1"><a class="header-anchor" href="#proxy-如何实现响应式"><span>Proxy 如何实现响应式</span></a></h3><ul><li>利用 Reflect 实现响应式</li><li>Proxy 能规避 Object.defineProperty 的问题</li><li>Proxy 无法兼容所有浏览器，无法 polyfill</li></ul><h2 id="watch-和-watcheffect-的区别" tabindex="-1"><a class="header-anchor" href="#watch-和-watcheffect-的区别"><span>watch 和 watchEffect 的区别</span></a></h2><ul><li>两者都可以监听 data 属性变化</li><li>watch 需要明确监听哪个属性</li><li>watchEffect 会根据其中的属性，自动监听其变化</li></ul><h2 id="setup-中如何获取组件实例" tabindex="-1"><a class="header-anchor" href="#setup-中如何获取组件实例"><span>setup 中如何获取组件实例</span></a></h2><ul><li>在 setup 和其他 Composition API 中没有 this</li><li>可以通过 getCurrentInstance 获取当前实例</li><li>若使用 Options API 可照常使用 this</li></ul><h2 id="vue3-为何比-vue2-快" tabindex="-1"><a class="header-anchor" href="#vue3-为何比-vue2-快"><span>Vue3 为何比 Vue2 快</span></a></h2><ul><li>Proxy 响应式</li><li>PatchFlag <ul><li>编译模版时，动态节点做标记</li><li>标记，分为不同的类型，如 TEXT PROPS</li><li>diff 算法时，可以区分静态节点，以及不同类型的动态节点</li></ul></li><li>hoistStatic <ul><li>将静态节点的定义，提升到父作用域，缓存起来</li><li>多个相邻的静态节点，会被合并起来</li><li>典型的拿空间换时间的优化策略</li></ul></li><li>cacheHandler：缓存事件</li><li>SSR 优化</li><li>tree-shaking</li></ul><h2 id="vite-为何启动快" tabindex="-1"><a class="header-anchor" href="#vite-为何启动快"><span>Vite 为何启动快</span></a></h2><ul><li>开发环境使用 ES6 Module ，无需打包，webpack 需要将 ES6 Module 打包转化成 ES5 代码去执行，而 Vite 直接使用 ES6 Module 引入包执行，因此会快很多</li><li>生产环境使用 rollup，并不会快很多</li></ul><h2 id="composition-api-和-react-hooks-区别" tabindex="-1"><a class="header-anchor" href="#composition-api-和-react-hooks-区别"><span>Composition API 和 React Hooks 区别</span></a></h2><ul><li>前者 setup 只会被调用一次，而后者函数会被多次调用</li><li>前者无需 useMemo useCallback ，因为 setup 只调用一次</li><li>前者无需顾虑调用顺序，而后者需要保证 hooks 的顺序一致</li><li>前者 reactive + ref 比后者 useState 要难理解</li></ul><h2 id="vue3使用jsx" tabindex="-1"><a class="header-anchor" href="#vue3使用jsx"><span>Vue3使用JSX</span></a></h2><p>JSX中使用插值、判断、循环的方式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> flagRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">changeFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        flagRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>flagRef<span class="token punctuation">.</span>value    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;a1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a3&#39;</span><span class="token punctuation">]</span>    </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span>changeFlag<span class="token punctuation">}</span><span class="token operator">&gt;</span>demo1 <span class="token punctuation">{</span>flagRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>flagRef<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Child a<span class="token operator">=</span><span class="token punctuation">{</span>flagRef<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>                                </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> render</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const i=s(t,[["render",l],["__file","principle.html.vue"]]),u=JSON.parse('{"path":"/zh/vue/vue3/principle.html","title":"Vue3原理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Vue3 如何实现响应式","slug":"vue3-如何实现响应式","link":"#vue3-如何实现响应式","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"Reflect 作用","slug":"reflect-作用","link":"#reflect-作用","children":[]},{"level":3,"title":"Proxy 如何实现响应式","slug":"proxy-如何实现响应式","link":"#proxy-如何实现响应式","children":[]}]},{"level":2,"title":"watch 和 watchEffect 的区别","slug":"watch-和-watcheffect-的区别","link":"#watch-和-watcheffect-的区别","children":[]},{"level":2,"title":"setup 中如何获取组件实例","slug":"setup-中如何获取组件实例","link":"#setup-中如何获取组件实例","children":[]},{"level":2,"title":"Vue3 为何比 Vue2 快","slug":"vue3-为何比-vue2-快","link":"#vue3-为何比-vue2-快","children":[]},{"level":2,"title":"Vite 为何启动快","slug":"vite-为何启动快","link":"#vite-为何启动快","children":[]},{"level":2,"title":"Composition API 和 React Hooks 区别","slug":"composition-api-和-react-hooks-区别","link":"#composition-api-和-react-hooks-区别","children":[]},{"level":2,"title":"Vue3使用JSX","slug":"vue3使用jsx","link":"#vue3使用jsx","children":[]}],"git":{"updatedTime":1736823036000,"contributors":[{"name":"zhan_zhang","username":"zhan_zhang","email":"18311292602@163.com","commits":2,"url":"https://github.com/zhan_zhang"}]},"filePathRelative":"zh/vue/vue3/principle.md"}');export{i as comp,u as data};
