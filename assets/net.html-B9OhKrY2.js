import{_ as s,c as a,d as p,o as t}from"./app-J1Rr-56F.js";const e={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="网络相关" tabindex="-1"><a class="header-anchor" href="#网络相关"><span>网络相关</span></a></h1><h2 id="ajax-请求-get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#ajax-请求-get-和-post-的区别"><span>ajax 请求 get 和 post 的区别</span></a></h2><ul><li>get 一般用于查询操作，post 一般用于用户提交操作</li><li>get 参数拼接在 url 上，post 放在请求体内（数据体积可更大）</li><li>安全性：post 易于防止 CSRF</li></ul><h2 id="解释-jsonp-原理-为何不是真正到-ajax" tabindex="-1"><a class="header-anchor" href="#解释-jsonp-原理-为何不是真正到-ajax"><span>解释 jsonp 原理，为何不是真正到 ajax</span></a></h2><ul><li>浏览器的同源策略（服务器端没有同源策略）和跨域</li><li>哪些 html 标签能绕过跨域（img，script）</li></ul><h2 id="同源策略及跨域的解决方案" tabindex="-1"><a class="header-anchor" href="#同源策略及跨域的解决方案"><span>同源策略及跨域的解决方案</span></a></h2><p>浏览器的同源策略（Same-Origin Policy）是一种重要的安全机制，旨在防止不同来源（域名、协议、端口）的网页相互访问敏感数据。基于同源策略，前端开发中常常需要处理跨域请求，以在不同来源之间安全地进行数据通信。</p><h3 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略"><span>同源策略</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p>只有当两个 URL 的协议、域名和端口都相同，它们才属于同源。只有在同源的情况下，浏览器才能允许访问对方的资源。</p><h4 id="同源策略限制的内容" tabindex="-1"><a class="header-anchor" href="#同源策略限制的内容"><span>同源策略限制的内容</span></a></h4><ul><li>DOM 访问：不同源的页面之间不能互相操作 DOM。</li><li>Cookie 和 LocalStorage 访问：不同源的页面之间不能互相访问对方的 Cookie 和本地存储数据。</li><li>Ajax 请求：在默认情况下，浏览器会阻止不同源的 Ajax 请求。</li></ul><h3 id="前端跨域方案" tabindex="-1"><a class="header-anchor" href="#前端跨域方案"><span>前端跨域方案</span></a></h3><h4 id="_1-jsonp-json-with-padding" tabindex="-1"><a class="header-anchor" href="#_1-jsonp-json-with-padding"><span>1.JSONP（JSON with Padding）</span></a></h4><p><strong>原理</strong></p><p>利用 &lt;script&gt; 标签不受同源策略限制的特点，动态生成 &lt;script&gt; 标签来请求数据。服务端接收到请求后，将数据以函数调用的形式返回，前端定义对应的回调函数来处理数据。</p><p><strong>优缺点</strong></p><ul><li>优点：简单易用，兼容性好。</li><li>缺点：只支持 GET 请求，不适合复杂的请求和响应结构。</li></ul><p><strong>示例</strong></p><p>前端</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;https://example.com/data?callback=handleResponse&#39;</span><span class="token punctuation">;</span></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-cors-cross-origin-resource-sharing" tabindex="-1"><a class="header-anchor" href="#_2-cors-cross-origin-resource-sharing"><span>2.CORS（Cross-Origin Resource Sharing）</span></a></h4><p><strong>原理</strong></p><p>CORS 是一种跨域资源共享的机制，通过设置 HTTP 响应头，服务器声明允许的请求源、请求方式和头信息。浏览器收到响应头后，决定是否允许跨域请求。</p><ul><li>简单请求：如 GET、POST 请求，不带自定义头信息，直接通过。</li><li>预检请求：对于复杂请求（如 PUT、DELETE、带有自定义头信息等），浏览器会先发送 OPTIONS 请求预检，确认服务器是否允许跨域。</li></ul><p><strong>优缺点</strong></p><ul><li>优点：支持多种 HTTP 请求方法，控制粒度细。</li><li>缺点：需要服务端配置响应头。</li></ul><p><strong>示例</strong></p><p>服务端设置响应头：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com</span>
<span class="line">Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Methods<span class="token operator">:</span> <span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token constant">PUT</span><span class="token punctuation">,</span> <span class="token constant">DELETE</span></span>
<span class="line">Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Headers<span class="token operator">:</span> Content<span class="token operator">-</span>Type</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端直接发起请求：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/api/data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-代理服务器" tabindex="-1"><a class="header-anchor" href="#_3-代理服务器"><span>3.代理服务器</span></a></h4><p><strong>原理</strong></p><p>通过搭建一个代理服务器，前端将跨域请求发送到同源的代理服务器，再由代理服务器将请求转发到目标服务器。这样浏览器看到的请求是同源的，而实际跨域请求由后端代理实现。</p><p><strong>优缺点：</strong></p><ul><li>优点：支持多种 HTTP 请求方法，适合复杂跨域场景。</li><li>缺点：需要搭建和维护代理服务器。</li></ul><p><strong>示例：</strong> 前端请求 /api/data：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本地开发中，可以通过 Webpack 配置代理：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// webpack.config.js</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-document-domain-iframe-跨域" tabindex="-1"><a class="header-anchor" href="#_4-document-domain-iframe-跨域"><span>4. document.domain + iframe 跨域</span></a></h4><p><strong>原理：</strong></p><p>适用于主域相同、子域不同的场景。通过将 document.domain 设置为相同的主域来实现跨域访问。</p><p><strong>优缺点：</strong></p><ul><li>优点：适用于同主域的场景。</li><li>缺点：只能用于同一主域名下的子域，场景受限。</li></ul><p><strong>示例：</strong></p><p>页面 A（a.example.com）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置主域</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>页面 B（b.example.com）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置主域</span></span>
<span class="line"><span class="token comment">// 通过 iframe 访问页面 A 的内容</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-postmessage-跨域通信" tabindex="-1"><a class="header-anchor" href="#_5-postmessage-跨域通信"><span>5. postMessage 跨域通信</span></a></h4><p><strong>原理：</strong></p><p>postMessage 是 HTML5 提供的 API，可以安全地实现跨源通信。通过在不同来源的窗口间发送消息。</p><p><strong>优缺点：</strong></p><ul><li>优点：安全、灵活，适合多窗口和嵌套 iframe 的场景。</li><li>缺点：只能用于页面间的数据传递，不能直接跨域请求数据。</li></ul><p><strong>示例：</strong></p><p>父窗口页面：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myIframe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from parent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://child.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token string">&#39;https://child.example.com&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到子页面信息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子页面（https://child.example.com）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token string">&#39;https://parent.example.com&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到父页面信息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  event<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from child&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-websocket-跨域" tabindex="-1"><a class="header-anchor" href="#_6-websocket-跨域"><span>6. WebSocket 跨域</span></a></h4><p><strong>原理：</strong></p><p>WebSocket 是一种通信协议，它不受同源策略的限制，可以直接建立跨域连接，实现双向通信。</p><p><strong>优缺点：</strong></p><ul><li>优点：适合实时通信场景。</li><li>缺点：需要 WebSocket 支持，不适合普通 HTTP 请求。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;wss://example.com/socket&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到消息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-nginx-反向代理" tabindex="-1"><a class="header-anchor" href="#_7-nginx-反向代理"><span>7. nginx 反向代理</span></a></h4><p><strong>原理：</strong></p><p>使用 Nginx 配置反向代理，将跨域请求代理到同源地址，再转发到目标服务器，实现跨域访问。</p><p><strong>优缺点：</strong></p><ul><li>优点：实现简单、性能好，适合生产环境。</li><li>缺点：需要配置服务器。</li></ul><p><strong>示例：</strong></p><p>在 Nginx 配置中添加：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">server <span class="token punctuation">{</span></span>
<span class="line">    location <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span></span>
<span class="line">        proxy_pass https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span><span class="token punctuation">;</span></span>
<span class="line">        proxy_set_header Host $host<span class="token punctuation">;</span></span>
<span class="line">        proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Real<span class="token operator">-</span><span class="token constant">IP</span> $remote_addr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http请求版本和区别" tabindex="-1"><a class="header-anchor" href="#http请求版本和区别"><span>HTTP请求版本和区别</span></a></h2><p>HTTP（Hypertext Transfer Protocol）是互联网中最重要的协议之一，用于客户端和服务器之间的通信。HTTP 经过多次迭代和优化，目前主要有以下几个版本：HTTP/0.9、HTTP/1.0、HTTP/1.1、HTTP/2 和 HTTP/3。每个版本在传输性能、并发性、安全性等方面有所不同。</p><h3 id="_1-http-0-9" tabindex="-1"><a class="header-anchor" href="#_1-http-0-9"><span>1. HTTP/0.9</span></a></h3><p><strong>特点：</strong></p><ul><li>HTTP/0.9 是最早的 HTTP 协议版本，诞生于 1991 年，专注于传输纯文本。</li><li>无状态：每个请求独立，服务器不保存请求间的状态。</li><li>仅支持 GET 方法：只能请求资源，无法发送数据。</li><li>没有 HTTP 头：请求和响应都没有头信息，仅能传输纯文本。</li></ul><p><strong>应用场景：</strong></p><ul><li>HTTP/0.9 主要用于初期的网页浏览，支持有限的文本传输，不适合现代应用。</li></ul><h3 id="_2-http-1-0" tabindex="-1"><a class="header-anchor" href="#_2-http-1-0"><span>2. HTTP/1.0</span></a></h3><p>发布时间：1996 年</p><p><strong>特点：</strong></p><ul><li>支持多种 HTTP 方法：增加了 POST 和 HEAD 方法，支持更多请求类型。</li><li>增加了 HTTP 头：客户端和服务器可以通过 HTTP 头传递更多的元信息，如 Content-Type、Content-Length 等。</li><li>短连接：HTTP/1.0 默认使用短连接，每次请求完成后会关闭连接。为每个请求建立和关闭 TCP 连接的开销较大。</li></ul><p><strong>缺点：</strong></p><ul><li>每次请求都需要重新建立连接，效率低，特别是在同一页面包含多个资源（如图片、CSS）时，会导致性能瓶颈。</li><li>无缓存机制：缺乏明确的缓存控制，不能很好的支持现在web应用的性能需求</li><li>带宽利用率低：没有引入压缩等机制，数据传输效率较低</li></ul><h3 id="_3-http-1-1" tabindex="-1"><a class="header-anchor" href="#_3-http-1-1"><span>3. HTTP/1.1</span></a></h3><p>发布时间：1997 年</p><p><strong>特点：</strong></p><ul><li>长连接：引入了持久连接机制（Keep-Alive），允许多个请求和响应复用同一个 TCP 连接，减少连接建立的开销。</li><li>管道化：支持请求管道化（Pipelining），即在同一连接中，客户端可以同时发送多个请求而无需等待响应完成（不过，大多数浏览器并未完全实现此功能）。</li><li>增加新的 HTTP 方法：支持 PUT、DELETE、OPTIONS 等方法，拓展了 HTTP 的功能。</li><li>分块传输编码：支持分块传输编码（Chunked Transfer Encoding），在传输大文件或动态生成内容时，服务器可以分块发送数据。</li><li>Host 头：增加了 Host 头，使得同一台服务器可以通过主机名来区分不同的站点，支持虚拟主机的需求。</li><li>缓存控制：使用Cache-Control和ETag等头自字段更好的支持缓存</li><li>错误状态码扩展：增加了如206（部分内容）、409（冲突）、410（已删除）等状态码</li></ul><p><strong>缺点：</strong></p><ul><li>队头阻塞：虽然支持管道化，但同一个连接上，请求的响应必须按顺序返回，如果前一个请求阻塞，后续请求也会受影响。</li><li>并发限制：浏览器通常对同一域名的并发请求数量有限（通常为6个），超过限制的请求需要排队。</li></ul><h3 id="_4-http-2" tabindex="-1"><a class="header-anchor" href="#_4-http-2"><span>4. HTTP/2</span></a></h3><p>发布时间：2015 年</p><p><strong>特点：</strong></p><ul><li>二进制分帧：HTTP/2 采用二进制格式传输数据（而非文本格式），更高效。将请求和响应分解为更小的帧并进行多路复用。每个帧有唯一的流（Stream）ID。</li><li>多路复用：一个连接可以并发处理多个请求和响应，不会相互阻塞，彻底解决了 HTTP/1.x 中的队头阻塞问题。</li></ul><h4 id="http-2-0-的多路复用-multiplexing" tabindex="-1"><a class="header-anchor" href="#http-2-0-的多路复用-multiplexing"><span>HTTP/2.0 的多路复用 (Multiplexing)</span></a></h4><p>多路复用是 HTTP/2.0 的核心功能之一，用于解决 HTTP/1.1 中的性能瓶颈问题，例如队头阻塞 (Head-of-line Blocking) 和连接过多的问题。</p><p><strong>多路复用的核心特性</strong></p><p>1.单一连接，多个并发流：</p><ul><li>在 HTTP/2 中，客户端与服务器之间只需一个 TCP 连接即可并发传输多个请求和响应。</li><li>每个请求/响应被分成独立的帧，这些帧可以混合在同一个连接中传输。</li></ul><p>2.无序传输：</p><ul><li>HTTP/2 使用流 (Stream) 来标识每个请求/响应。即使帧的传输顺序不同，它们仍然可以在接收端根据流的标识符重新组装。</li></ul><p>3.双向通信：</p><ul><li>同一条连接既可以传输客户端的请求，也可以传输服务器的推送 (Server Push) 数据。</li></ul><p>4.消除队头阻塞：</p><ul><li>在 HTTP/1.1 中，浏览器通常会限制每个域名同时发起的 TCP 连接数量（通常是 6 个），超出的请求会被阻塞。</li><li>HTTP/2 的多路复用允许多个流独立传输，避免单个流阻塞其他流的传输。</li></ul><p><strong>HTTP/2 多路复用的原理</strong></p><p>1.帧 (Frame)：</p><ul><li>HTTP/2 将请求和响应的数据分成更小的帧，每个帧附带一个流标识符 (Stream ID)。</li><li>帧可以属于不同的流，它们可以交错在一起，通过相同的 TCP 连接发送。</li></ul><p>2.流 (Stream)：</p><ul><li>每个请求或响应对应一个流，每个流都有唯一的标识符。</li><li>流可以独立地打开、关闭和优先级设置。</li></ul><p>3.优先级 (Priority)：</p><ul><li>每个流都可以设置优先级，允许服务器优先传输高优先级的内容，从而优化带宽利用率。</li></ul><p>4.二进制协议：</p><ul><li>HTTP/2 使用二进制帧格式，取代了 HTTP/1.1 的文本格式。</li><li>二进制格式更高效，易于解析，减少了协议层的开销。</li></ul><p>5.流控 (Flow Control)：</p><ul><li>HTTP/2 使用窗口更新 (Window Update) 帧来控制流量，确保数据的发送方不会压垮接收方。</li><li>Header 压缩：使用 HPACK 算法对头信息进行压缩，减少传输体积，提升速度。</li><li>服务器推送：服务器可以在客户端请求之前主动推送资源（如 CSS、JavaScript 文件），减少后续请求延迟。</li></ul><h4 id="hpack" tabindex="-1"><a class="header-anchor" href="#hpack"><span>HPACK</span></a></h4><p>静态表</p><ul><li>静态表是一个预定义、全局共享的头字段集合</li><li>包含常用的HTTP头字段，如:method , :path , content-type等，最多61个</li><li>静态表是固定不变的，因此客户端和服务器之间无需传输，直接通过索引访问即可 如：:method:GET 的索引值为2，:authority的索引值为1</li></ul><p>动态表</p><ul><li>动态表是客户端和服务器自维护的一个内存缓冲区，用于存储当前会话的头字段。</li><li>头字段在动态表中按索引存储，重复出现时可以直接引用索引，而无需再次传输完整的字段。</li><li>动态表时可修改的，支持添加、更新和删除。</li></ul><p>哈夫曼编码</p><ul><li>哈夫曼编码时一种可变长度的二进制编码方案，用于对头字段的值进行进一步压缩。</li><li>它根据字符的出现频率分配编码，常见字符使用较短的编码，罕见字符使用较长的编码。</li></ul><p>HPACK 的优势</p><ul><li>减少冗余传输：利用动态表和静态表对重复字段进行索引引用，大幅减少传输的数据量。</li><li>高效压缩：哈夫曼编码进一步压缩头部数据。</li><li>带宽节约：尤其在多次请求场景下，动态表复用显著降低了带宽占用。</li><li>灵活性：动态表和静态表结合，同时支持安全的字段传输。</li></ul><p>优点：</p><ul><li>高性能：多路复用解决了HTTP/1.1的线头阻塞问题，头部压缩减少了宽带占用。</li><li>减少延迟：不需要为每个请求建立单独的连接，服务器推送提前传输资源，减少请求的等待时间。</li><li>传输效率高：二进制协议使得传输和解析更加高效。</li></ul><p>缺点：</p><ul><li>虽然 HTTP/2 性能明显提升，但依然基于 TCP 协议。由于 TCP 的握手和重传机制，在高丢包环境下性能会下降。</li></ul><h3 id="_5-http-3" tabindex="-1"><a class="header-anchor" href="#_5-http-3"><span>5. HTTP/3</span></a></h3><p>发布时间：2020 年（起草）</p><p>特点：</p><ul><li>基于 QUIC 协议：HTTP/3 采用 QUIC（Quick UDP Internet Connections）协议，基于 UDP 实现的传输层协议，解决了 TCP 的队头阻塞和慢启动问题。</li><li>减少连接建立时间：QUIC 将 TLS 和握手集成到协议中，支持 0-RTT 和 1-RTT 连接建立，使得连接速度更快。</li><li>无队头阻塞：HTTP/3 中每个数据流独立传输，即使某个流丢包，也不会影响其他流的传输。</li><li>更适合移动网络：在移动环境中，QUIC 更快的连接恢复和重传机制减少了因网络切换导致的连接中断。</li></ul><p>优点：</p><ul><li>HTTP/3 解决了 TCP 的一些固有问题，如队头阻塞和高丢包时的性能降低。更适合现代 Web 应用，特别是在移动网络和弱网环境下表现优异。</li></ul><p>缺点：</p><ul><li>由于基于 UDP，部分防火墙和网络中间设备可能会对 QUIC 协议造成阻碍。实现和推广仍在进行中。</li></ul>`,144)]))}const c=s(e,[["render",l],["__file","net.html.vue"]]),r=JSON.parse('{"path":"/zh/interview/net/net.html","title":"网络相关","lang":"en-US","frontmatter":{},"git":{"updatedTime":1736930876000,"contributors":[{"name":"zhan_zhang","username":"","email":"18311292602@163.com","commits":2}],"changelog":[{"hash":"9ccda37f2cf0d5a7ac7b38d822e1f762db4f39a4","time":1736930876000,"email":"18311292602@163.com","author":"zhan_zhang","message":"http"},{"hash":"ef7e29dc754facdf389b8a3022cb746ebce5a508","time":1736930446000,"email":"18311292602@163.com","author":"zhan_zhang","message":"完成js面试题文档编写"}]},"filePathRelative":"zh/interview/net/net.md"}');export{c as comp,r as data};
